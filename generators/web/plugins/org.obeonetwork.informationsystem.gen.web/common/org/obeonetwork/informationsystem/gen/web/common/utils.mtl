[comment encoding = UTF-8 /]
[module utils('http://www.obeonetwork.org/dsl/application/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/3.0.0', 'http://www.eclipse.org/emf/2002/Ecore')]

[query public genPlayServices(oclAny : OclAny) : Boolean = getProperty('gen-play-services').contains('true') /]


[** Gen the site base url. /]
[template public genSiteUrl(oclAny : OclAny) post (trim())]
[getProperty('base-url')/]
[/template]

[** Gen the site port. /]
[template public genSitePort(oclAny : OclAny) post (trim())]
[getProperty('port')/]
[/template]

[** Gen the current version. /]
[template public genCurrentVersion(oclAny : OclAny) post (trim())]
[getProperty('current-version')/]
[/template]

[** Gen the Github client id. /]
[template public genGithubClientId(oclAny : OclAny) post (trim())]
[getProperty('github-client-id')/]
[/template]

[** Gen the Github client secret. /]
[template public genGithubClientSecret(oclAny : OclAny) post (trim())]
[getProperty('github-client-secret')/]
[/template]

[** Gen the Github url authorize. /]
[template public genGithubUrlAuthorize(oclAny : OclAny) post (trim())]
[getProperty('github-url-authorize')/]
[/template]

[** Gen the Github url access token. /]
[template public genGithubUrlAccessToken(oclAny : OclAny) post (trim())]
[getProperty('github-url-access-token')/]
[/template]

[** Gen the Css directory path. /]
[template public genCssDirectoryPath(oclAny : OclAny) post (trim())]
[getProperty('css-directory-path')/]
[/template]

[** Gen the Img directory path. /]
[template public genImgDirectoryPath(oclAny : OclAny) post (trim())]
[getProperty('img-directory-path')/]
[/template]

[template public freeHtmlUC(text : String) post (trim())]
<!-- [protected (text.concat(' -->'))]
<!-- [/protected] -->
[/template]

[query public toIdent(str : String) : String = str.replaceAll('-', ' ').replaceAll('_', ' ').tokenize(' ').toUpperFirst()->toString() /]

[query public toViewIdent(str : String) : String = str.toLower().replaceAll(' ', '-') /]
[query public toViewIdent(aNamedElem : NamedElement) : String = aNamedElem.name.toViewIdent() /]


[**
 * Check if structFeat has a string type.
 * @param structFeat the structural feature context.
 */]
[query public hasStringType(structFeat : EStructuralFeature) : Boolean = 
	structFeat.eType.instanceClassName.existMatch(OrderedSet{'java.lang.String'}) 
/]

[**
 * Check if structFeat has a date type.
 * @param structFeat the structural feature context.
 */]
[query public hasDateType(structFeat : EStructuralFeature) : Boolean = 
	structFeat.eType.instanceClassName.existMatch(OrderedSet{'java.util.Date'})
/]

[**
 * Check if structFeat has a numeric type.
 * @param structFeat the structural feature context.
 */]
[query public hasNumericType(structFeat : EStructuralFeature) : Boolean = 
	structFeat.eType.instanceClassName.existMatch(OrderedSet{'int', 'long', 'double', 'float'})
/]

[**
 * This helper return true if we have one match between str and one of matchers.
 * @param str the string to compare.
 * @param matchers the string ordered set to test.
 */]
[query private existMatch(str : String, matchers : OrderedSet(String)) : Boolean = matchers->exists(equalsIgnoreCase(str))/]

[**********************************************************************
 * UnionOrdered Helper
 */]

[**
 * This helper makes a ordered union of String Ordered sets
 * (oSet1 U oSet2 => {oset1 items.., oset2 items..}).
 * @param oSet1 the first ordered set.
 * @param oSet2 the second ordered set.
 */]
[query public unionOrdered(oSet1 : OrderedSet(String), oSet2 : OrderedSet(String)) : OrderedSet(String) = 
	oSet1->unionOrderedGen(oSet2)->filter(String) 
/]

[**
 * This helper makes a ordered union of String Sequences 
 * (oSeq1 U oSeq2 => {oseq1 items.., oseq2 items..}).
 * @param oSeq1 the first sequence.
 * @param oSeq2 the second sequence. 
 */]
[query public unionOrdered(oSeq1 : Sequence(String), oSeq2 : Sequence(String)) : Sequence(String) = 
	oSeq1->unionOrderedGen(oSeq2)->filter(String) 
/]


[**
 * This helper makes a ordered union of AbstractViewElement Ordered sets
 * (oSet1 U oSet2 => {oset1 items.., oset2 items..}).
 * @param oSet1 the first ordered set.
 * @param oSet2 the second ordered set.
 */]
[query public unionOrdered(oSet1 : OrderedSet(AbstractViewElement), oSet2 : OrderedSet(AbstractViewElement)) : OrderedSet(AbstractViewElement) = 
	oSet1->unionOrderedGen(oSet2)->filter(AbstractViewElement) 
/]

[**
 * This helper makes a ordered union of AbstractViewElement Sequences 
 * (oSeq1 U oSeq2 => {oseq1 items.., oseq2 items..}).
 * @param oSeq1 the first sequence.
 * @param oSeq2 the second sequence.
 */]
[query public unionOrdered(oSeq1 : Sequence(AbstractViewElement), oSeq2 : Sequence(AbstractViewElement)) : Sequence(AbstractViewElement) = 
	oSeq1->unionOrderedGen(oSeq2)->filter(AbstractViewElement) 
/]


[**
 * This generic helper makes a ordered union (oSet1 U oSet2 => {oset1 items.., oset2 items..}).
 * @param oSet1 the first ordered set.
 * @param oSet2 the second ordered set.
 */]
[query private unionOrderedGen(oSet1 : OrderedSet(T), oSet2 : OrderedSet(T)) : OrderedSet(T) = 
	oSet2->iterate(s: T; r: OrderedSet(T) = oSet1| r->insertAt(r->size() + 1, s))
/]

[**
 * This generic helper makes a ordered union (oSeq1 U oSeq2 => {oseq1 items.., oseq2 items..}).
 * @param oSeq1 the first sequence.
 * @param oSeq2 the second sequence.
 */]
[query private unionOrderedGen(oSeq1 : Sequence(T), oSeq2 : Sequence(T)) : Sequence(T) = 
	oSeq2->iterate(s: T; r: Sequence(T) = oSeq1| r->insertAt(r->size() + 1, s))
/]