[comment encoding = UTF-8 /]
[module toolkitUtil('http://www.obeonetwork.org/dsl/application/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/3.0.0', 'http://www.obeonetwork.org/dsl/environment/2.0.0')]
[import org::obeonetwork::informationsystem::gen::web::common::cinematic::view::viewUtil /]
[import org::obeonetwork::informationsystem::gen::web::common::cinematic::toolkit::widgetUtil /]



[**********************************************************************
 * Events
 */]

[**
 * Check if absViewElem has onClick event.
 * @param absViewElem the view element that may contain the event.
 */]
[query public hasOnClickEvent(absViewElem : AbstractViewElement) : Boolean = events->exists(isOnClick()) /]

[**
 * Check if absViewElem has close event.
 * @param absViewElem the view element that may contain the event.
 */]
[query public hasCloseEvent(absViewElem : AbstractViewElement) : Boolean = events->exists(isClose()) /]

[**
 * Check if absViewElem has onClickObject event.
 * @param absViewElem the view element that may contain the event.
 */]
[query public hasOnClickObjectEvent(absViewElem : AbstractViewElement) : Boolean = events->exists(isOnClickObject()) /]

[**
 * Check if absViewElem has save event.
 * @param absViewElem the view element that may contain the event.
 */]
[query public hasSaveEvent(absViewElem : AbstractViewElement) : Boolean = events->exists(isSave()) /]

[**
 * Check if absViewElem has add event.
 * @param absViewElem the view element that may contain the event.
 */]
[query public hasAddEvent(absViewElem : AbstractViewElement) : Boolean = events->exists(isAdd()) /]

[**
 * Check if absViewElem has edit event.
 * @param absViewElem the view element that may contain the event.
 */]
[query public hasEditEvent(absViewElem : AbstractViewElement) : Boolean = events->exists(isEdit()) /]

[**
 * Check if absViewElem has delete event.
 * @param absViewElem the view element that may contain the event.
 */]
[query public hasDeleteEvent(absViewElem : AbstractViewElement) : Boolean = events->exists(isDelete()) /]



[**********************************************************************
 * Widgets
 */]

[**
 * Check if absViewElem is a Page widget.
 * @param absViewElem the view element that may bind the widget.
 */]
[query public isPage(absViewElem : AbstractViewElement) : Boolean = resolveInstance().widget.isPage() /]

[**
 * Check if absViewElem is a WidgetContainer widget.
 * @param absViewElem the view element that may bind the widget.
 */]
[query public isWidgetContainer(absViewElem : AbstractViewElement) : Boolean = resolveInstance().widget.isWidgetContainer() /]

[**
 * Check if absViewElem is a Menu widget.
 * @param absViewElem the view element that may bind the widget.
 */]
[query public isMenu(absViewElem : AbstractViewElement) : Boolean = resolveInstance().widget.isMenu() /]

[**
 * Check if absViewElem is a PopupContainer widget.
 * @param absViewElem the view element that may bind the widget.
 */]
[query public isPopupContainer(absViewElem : AbstractViewElement) : Boolean = resolveInstance().widget.isPopupContainer() /]


[**
 * Check if absViewElem is a Pagination widget.
 * @param absViewElem the view element that may bind the widget.
 */]
[query public isPagination(absViewElem : AbstractViewElement) : Boolean = resolveInstance().widget.isPagination() /]

[**
 * Check if absViewElem is a Stats widget.
 * @param absViewElem the view element that may bind the widget.
 */]
[query public isStats(absViewElem : AbstractViewElement) : Boolean = resolveInstance().widget.isStats() /]

[**
 * Check if absViewElem is a CreateForm widget.
 * @param absViewElem the view element that may bind the widget.
 */]
[query public isCreateForm(absViewElem : AbstractViewElement) : Boolean = resolveInstance().widget.isCreateForm() /]

[**
 * Check if absViewElem is an EditForm widget.
 * @param absViewElem the view element that may bind the widget.
 */]
[query public isEditForm(absViewElem : AbstractViewElement) : Boolean = resolveInstance().widget.isEditForm() /]

[**
 * Check if absViewElem is an ObjectList widget.
 * @param absViewElem the view element that may bind the widget.
 */]
[query public isObjectList(absViewElem : AbstractViewElement) : Boolean = resolveInstance().widget.isObjectList() /]

[**
 * Check if absViewElem is an ObjectSingle widget.
 * @param absViewElem the view element that may bind the widget.
 */]
[query public isObjectSingle(absViewElem : AbstractViewElement) : Boolean = resolveInstance().widget.isObjectSingle() /]

[**
 * Check if absViewElem is a PageLink widget.
 * @param absViewElem the view element that may bind the widget.
 */]
[query public isPageLink(absViewElem : AbstractViewElement) : Boolean = resolveInstance().widget.isPageLink() /]


[**
 * Check if absViewElem bound by an EClass.
 * @param absViewElem the view element that may bind.
 */]
[query public isBoundJsWidget(absViewElem : AbstractViewElement) : Boolean = isJsWidget() and isBound() /]

[**
 * Check if the widget of this view element is a Javascript widget (Create, List, Edit or Pagination). 
 * @param absViewElem the view element context
 */]
[query public isJsWidget(absViewElem : AbstractViewElement) : Boolean = resolveInstance().widget.isJsWidget() /]

[**
 * Check if the widget of this view element is a Javascript dynamic container (Popup). 
 * @param absViewElem the view element context
 */]
[query public isDynamicContainer(absViewElem : AbstractViewElement) : Boolean = resolveInstance().widget.isDynamicContainer() /]