[comment encoding = UTF-8 /]
[module factory('http://www.eclipse.org/emf/2002/Ecore')/]

[import org::obeonetwork::informationsystem::gen::web::common::js::jsUtils /]

[template public genFactory(eClasses : OrderedSet(EClass))]
[file ('app/util/'.concat('Factory.java'), false, 'UTF-8')]
package util;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import models.*;
import services.*;

import org.codehaus.jackson.JsonNode;

import play.Logger;
import play.libs.Json;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMap.Builder;

public class Factory {

	[for (anEClass : EClass | eClasses)]
	[let Object : String = anEClass.toTypeIdent()]
	[let object : String = anEClass.toVarIdent()]
	public static [Object/] json2[Object/](JsonNode json) {

		[for (classAttribute : EStructuralFeature | anEClass.eAllStructuralFeatures)]
		[if(classAttribute.eType.oclIsKindOf(EClass))]
		[if(classAttribute.many)]
		List<[classAttribute.eType.toTypeIdent()/]> [classAttribute.toVarIdent()/] = jsonTo[classAttribute.eType.toTypeIdent()/]s(json.path("[classAttribute.toVarIdent()/]Proxies"));
		[else]
		[classAttribute.eType.toTypeIdent()/] [classAttribute.toVarIdent()/] = jsonTo[classAttribute.eType.toTypeIdent()/](json.path("[classAttribute.toVarIdent()/]Proxy"));
		[/if]
		[/if]
		[/for]
		return new [Object/](
				[for (classAttribute : EStructuralFeature | anEClass.eAllStructuralFeatures)]
				[if(classAttribute.eType.oclIsKindOf(EClass))]
					[if (i<>1)],[/if][classAttribute.toVarIdent()/]
					
				[else]
					[if (classAttribute.eType.instanceClassName.equalsIgnoreCase('java.lang.String'))]
					[if (i<>1)],[/if]json.path("[classAttribute.toVarIdent()/]").asText()
					[elseif (classAttribute.eType.instanceClassName.equalsIgnoreCase('long'))]
					[if (i<>1)],[/if]json.path("[classAttribute.toVarIdent()/]").asLong()
					[elseif (classAttribute.eType.instanceClassName.equalsIgnoreCase('int'))]
					[if (i<>1)],[/if]json.path("[classAttribute.toVarIdent()/]").asInt()
					[else]
						/* WARN [classAttribute.eType.instanceClassName/] type not supported by this generator */
					[/if]
				[/if]
				[/for]
				);
	}
	[/let]
	[/let]
	[/for]

	public static List<Long> jsonNode2ListOfLong(JsonNode node) {

		List<Long> listOfLong = new ArrayList<Long>();
		Iterator<JsonNode> iterJson = node.iterator();

		while(iterJson.hasNext()) {
			JsonNode itemIdNode = iterJson.next();
			listOfLong.add(itemIdNode.asLong());
		}
		return listOfLong;
	}

	public static Proxy json2Proxy(JsonNode node) {
		return new Proxy(node.path("id").asLong(),node.path("desc").asText());
	}

	public static List<Proxy> json2Proxies(JsonNode node) {
		List<Proxy> proxies = new ArrayList<Proxy>();
		Iterator<JsonNode> iterJson = node.iterator();
		while(iterJson.hasNext()) {
			JsonNode currentNode = iterJson.next();
			proxies.add(json2Proxy(currentNode));
		}
		return proxies;
	}

	public static JsonNode proxy2Json(Proxy proxy) {
		return Json.toJson(
				ImmutableMap.builder()
				.put("id", proxy.getId())
				.put("desc", proxy.getDesc())
				.build()
				);
	}

	public static JsonNode stat2Json(Stat stat) {
		return Json.toJson(
				ImmutableMap.builder()
				.put("res", stat.getRes())
				.put("desc", stat.getDesc())
				.build()
				);
	}



	[for (anEClass : EClass | eClasses)]
	[let Object : String = anEClass.toTypeIdent()]
	[let object : String = anEClass.toVarIdent()]
	public static JsonNode [object/]2Json([Object/] [object/]) {

		Builder<Object, Object> builder = ImmutableMap.builder();
		[for (classAttribute : EStructuralFeature | anEClass.eAllStructuralFeatures)]
		[if(classAttribute.eType.oclIsKindOf(EClass))]
			[if (classAttribute.many)]
		if([object/].get[classAttribute.toTypeIdent()/]() != null) {
			List<Proxy> [classAttribute.eType.toVarIdent()/]Proxies = new ArrayList<Proxy>();
			for ([classAttribute.eType.toTypeIdent()/] [classAttribute.eType.toVarIdent()/] : [object/].get[classAttribute.toTypeIdent()/]()) {
				[classAttribute.eType.toVarIdent()/]Proxies.add([classAttribute.eType.toVarIdent()/].toProxy());
			}
			builder.put("[classAttribute.eType.toVarIdent()/]Proxies", [classAttribute.eType.toVarIdent()/]Proxies);
		}
			[else]
		if([object/].get[classAttribute.toTypeIdent()/]() != null) {
			builder.put("[classAttribute.eType.toVarIdent()/]Proxy", [object/].get[classAttribute.toTypeIdent()/]().toProxy());
		}
			[/if]
		[else]
		if([object/].get[classAttribute.toTypeIdent()/]() != null)
			builder.put("[classAttribute.toVarIdent()/]", [object/].get[classAttribute.toTypeIdent()/]());
		[/if]
		[/for]
		
		return Json.toJson(builder.build());
	}
	[/let]
	[/let]
	[/for]

	[for (anEClass : EClass | eClasses)]
	[let Object : String = anEClass.toTypeIdent()]
	[let object : String = anEClass.toVarIdent()]
	public static [Object/] jsonTo[Object/](JsonNode node) {
		Proxy proxy = json2Proxy(node);
		return [Object/]Services.getById(proxy.getId());
	}

	public static List<[Object/]> jsonTo[Object/]s(JsonNode node) {
		List<Proxy> proxies = json2Proxies(node);
		List<Long> ids = new ArrayList<Long>();
		for(Proxy proxy : proxies) {
			ids.add(proxy.getId());
		}
		return [Object/]Services.getByIds(ids);
	}
	[/let]
	[/let]
	[/for]

}
	[/file]
[/template]
