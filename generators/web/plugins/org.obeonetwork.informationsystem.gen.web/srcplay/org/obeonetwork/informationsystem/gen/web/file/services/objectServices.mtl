[comment encoding = UTF-8 /]
[module objectServices('http://www.eclipse.org/emf/2002/Ecore')/]

[import org::obeonetwork::informationsystem::gen::web::common::js::jsUtils /]

[template public genObjectServices(anEClass : EClass) {
	Object : String = anEClass.toTypeIdent();
	object : String = anEClass.toVarIdent();
}]
[file ('app/services/'.concat(anEClass.name.concat('Services.java')), false, 'UTF-8')]
package services;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.avaje.ebean.Page;
import com.avaje.ebean.PagingList;
import com.avaje.ebean.Ebean;
import com.avaje.ebean.TxRunnable;

import models.*;
import play.Logger;
import play.db.ebean.Model.Finder;

public class [Object/]Services {

	private static Finder<Long,[Object/]> find = new Finder(Long.class, [Object/].class);

	public static [Object/] getById(Long id) { 
		return find.byId(id);
	}

	public static List<[Object/]> rows(int rowId, int nbElemByRow) {
		Logger.debug("[Object/]Services rows : "+find.all().size());
		Page<[Object/]> [object/]s = find.where().findPagingList(nbElemByRow).getPage(rowId);
		return [object/]s.getList(); 
	}

	public static int count() { 
		int size = find.all().size();
		return size; 
	}

	public static List<[Object/]> all() { 
		return find.all(); 
	}

	public static List<Proxy> allProxies() { 
		List<Proxy> proxies = new ArrayList<Proxy>();
		List<[Object/]> [object/]s = find.all();
		for([Object/] [object/]: [object/]s) {
			proxies.add([object/].toProxy());
		}
		return proxies; 
	}

	public static List<Stat> stats() {
		List<Stat> stats = new ArrayList<Stat>();

		stats.add(new Stat(14L,"January"));
		stats.add(new Stat(11L,"February"));
		stats.add(new Stat(30L,"March"));
		stats.add(new Stat(20L,"April"));
		stats.add(new Stat(24L,"May"));
		stats.add(new Stat(12L,"June"));
		stats.add(new Stat(2L,"July"));
		stats.add(new Stat(4L,"August"));
		stats.add(new Stat(50L,"September"));
		stats.add(new Stat(20L,"October"));
		stats.add(new Stat(7L,"November"));
		stats.add(new Stat(10L,"December"));

		return stats;
	}

	public static List<[Object/]> getByIds(List<Long> ids) { 

		StringBuffer strIds = new StringBuffer();
		Iterator<Long> IterIds = ids.iterator();

		strIds.append("(");
		while(IterIds.hasNext()) {
			Long id = IterIds.next();
			strIds.append(id);
			if(IterIds.hasNext())
				strIds.append(",");
		}
		strIds.append(")");
		return find.where("id IN "+strIds).findList(); 
	}

	/*public static List<[Object/]> search(String matcher) { 
		Logger.debug("[Object/]Services search : "+matcher);
		return find.where("name LIKE "+matcher+"%").findList();
	}*/

	public static Long create([Object/] [object/]) {
		[object/].save();
		[for (classAttribute : EStructuralFeature | anEClass.eAllStructuralFeatures->asOrderedSet())]
		[if (classAttribute.many and classAttribute.eType.oclIsKindOf(EClass))]
		for([classAttribute.eType.toTypeIdent()/] [classAttribute.eType.toVarIdent()/] : [object/].get[classAttribute.toTypeIdent()/]()) {
			[classAttribute.eType.toVarIdent()/].set[Object/]([object/]);
			[classAttribute.eType.toVarIdent()/].save();
		}
		[/if]
		[/for]
		Logger.debug("[Object/] CREATE : " + [object/].getId());
		return [object/].getId();
	}

	public static Boolean delete(Long id) { 
		find.ref(id).delete();
		Logger.debug("[Object/] DELETE : " + id);
		return find.ref(id)==null;
	}

	public static Boolean update(final [Object/] [object/]) { 

		[Object/] db[Object/] = Ebean.find([Object/].class, [object/].getId());
		[for (classAttribute : EStructuralFeature | anEClass.eAllStructuralFeatures->asOrderedSet())]
		[if (classAttribute.many and classAttribute.eType.oclIsKindOf(EClass))]
		for([classAttribute.eType.toTypeIdent()/] [classAttribute.eType.toVarIdent()/] : db[Object/].get[classAttribute.toTypeIdent()/]()) {
			[classAttribute.eType.toVarIdent()/].set[Object/](null);
			[classAttribute.eType.toVarIdent()/].save();
		}

		for([classAttribute.eType.toTypeIdent()/] [classAttribute.eType.toVarIdent()/] : [object/].get[classAttribute.toTypeIdent()/]()) {
			[classAttribute.eType.toVarIdent()/].set[Object/](db[Object/]);
			[classAttribute.eType.toVarIdent()/].save();
		}
		[/if]
		[/for]

		[for (classAttribute : EStructuralFeature | anEClass.eAllStructuralFeatures->asOrderedSet())]
		[if (classAttribute.many and classAttribute.eType.oclIsKindOf(EClass))]
		[else]
		db[Object/].set[classAttribute.toTypeIdent()/]([object/].get[classAttribute.toTypeIdent()/]());
		[/if]
		[/for]

		db[Object/].save();
		Logger.debug("[Object/] UPDATE : " + [object/].id);
		return true;
	}
}
[/file]
[/template]
