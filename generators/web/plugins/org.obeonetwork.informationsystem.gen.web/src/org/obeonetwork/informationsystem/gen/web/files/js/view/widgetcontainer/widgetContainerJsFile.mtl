[comment encoding = UTF-8 /]
[module widgetContainerJsFile('http://www.obeonetwork.org/dsl/application/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/3.0.0')/]
[import org::obeonetwork::informationsystem::gen::web::common::utils /]
[import org::obeonetwork::informationsystem::gen::web::common::js::jsUtils /]
[import org::obeonetwork::informationsystem::gen::web::common::js::jsDirectoryPath /]
[import org::obeonetwork::informationsystem::gen::web::common::js::jsFilePath /]
[import org::obeonetwork::informationsystem::gen::web::common::cinematic::toolkit::toolkitUtil /]
[import org::obeonetwork::informationsystem::gen::web::common::cinematic::flow::flowUtil /]
[import org::obeonetwork::informationsystem::gen::web::common::cinematic::flow::transitionUtil /]
[import org::obeonetwork::informationsystem::gen::web::common::cinematic::cinematicUtil /]
[import org::obeonetwork::informationsystem::gen::web::common::cinematic::view::viewUtil /]

[query public reqStaticWidgets(aWidgetContainer : ViewContainer) : Sequence(AbstractViewElement) = aWidgetContainer.allSubViewElements()->select(isJsWidget())->asSequence() /]


[template public genWidgetContainer(aWidgetContainer : ViewContainer) ? (isWidgetContainer()) {
		This : String = genWidgetContainerFileIdent();
		Ember : String = genEmberIdent();

		App : String = genAppIdent();
		AppPath : String = genAppFileRPath();
		
		Pagination : String = genJsPaginationIdent();
		PaginationPath : String = genJsPaginationFileRPath();
		
		Widgets : Sequence(AbstractViewElement) = aWidgetContainer.reqStaticWidgets();
		WidgetPaths: Sequence(String) = Sequence{AppPath, PaginationPath}->unionOrdered(Widgets.genJsWidgetFileRPath())->asOrderedSet()->asSequence();
		WidgetIdents: Sequence(String) = Sequence{App, Pagination}->unionOrdered(Widgets.genJsWidgetIdent())->asOrderedSet()->asSequence();
}]
[file (genJsFullPath(genWidgetContainerFileRPath()), false, 'UTF-8')]

[genJsCopyrightHeader()/]

[genJsHeader('0.4.0')/]

[genAMDHeader(
	WidgetPaths, 
	Sequence{Ember},
	WidgetIdents
)/]
	
	var [This/] = {};
	
	var templateName = "[aWidgetContainer.toViewIdent()/]";
	
	var _Class = Em.ContainerView.extend({ classNames: ['['/]templateName[']'/] });
	
	/*
	 * create an incoming choco View
	 * @return the view instance
	 */
	[This/].create = function() {
		/** [protected ('default init widgets */')]
		[for (viewElem : AbstractViewElement | Widgets)]
		var [viewElem.name.toVarIdent()/] = [viewElem.genJsWidgetIdent()/].create();
		[if (viewElem.isObjectList())]
		var [viewElem.name.concat('PrePagination').toVarIdent()/] = [Pagination/].create([viewElem.name.toVarIdent()/]);
		[viewElem.name.toVarIdent()/].addPaginationWidget([viewElem.name.concat('PrePagination').toVarIdent()/]);

		var [viewElem.name.concat('PostPagination').toVarIdent()/] = [Pagination/].create([viewElem.name.toVarIdent()/]);
		[viewElem.name.toVarIdent()/].addPaginationWidget([viewElem.name.concat('PostPagination').toVarIdent()/]);
		
		[/if]
		[/for]
		/** [/protected] */

		var view = _Class.create({
			/** [protected ('default sub widgets */')]
			childViews: ['['/]
						[for (viewElem : AbstractViewElement | Widgets)]
						[if (viewElem.isObjectList())]
						'[viewElem.name.concat('PrePagination').toVarIdent()/]',
						[/if]
						'[viewElem.name.toVarIdent()/]',
						[if (viewElem.isObjectList())]
						'[viewElem.name.concat('PostPagination').toVarIdent()/]',
						[/if]
						[/for]
						[']'/],
			[for (viewElem : AbstractViewElement | Widgets)]
			[if (viewElem.isObjectList())]
			[viewElem.name.concat('PrePagination').toVarIdent()/] : [viewElem.name.concat('PrePagination').toVarIdent()/],
			[/if]
			[viewElem.name.toVarIdent()/] : [viewElem.name.toVarIdent()/],
			[if (viewElem.isObjectList())]
			[viewElem.name.concat('PostPagination').toVarIdent()/] : [viewElem.name.concat('PostPagination').toVarIdent()/],
			[/if]
			[/for]
			/** [/protected] */

			[freeJsUC('additional features')/]
			[for (aTransitionOut : String | aWidgetContainer.viewStates().reqTransitionsLeaveFrom()->select(not(to.oclIsUndefined()) and to.oclIsKindOf(ViewState) and isOnClick()).toIdent().toVarIdent())]
			[aTransitionOut/] : cb_[aTransitionOut/],
			[/for]
			[for (aTransitionIn : String | aWidgetContainer.viewStates().reqTransitionsIncomeTo()->select(not(from.oclIsUndefined()) and from.oclIsKindOf(ViewState) and (isClose() or isAdd())).toIdent().toVarIdent()->asOrderedSet())]
			[aTransitionIn/] : cb_[aTransitionIn/],
			[/for]
		});
		
		return view;
		
	};

	
[genAMDFooter(This)/]
[/file]
[/template]


[template private eventCallBack(eventIdent : String, origin : AbstractViewElement, target : AbstractViewElement)]
// [eventIdent/] event call back has been bypass (Widget Type problem or not dynamic support)
[/template]
