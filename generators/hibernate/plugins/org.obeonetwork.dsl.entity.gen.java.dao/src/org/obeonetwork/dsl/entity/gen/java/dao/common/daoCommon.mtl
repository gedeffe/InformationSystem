[comment encoding = UTF-8 /]
[comment **
 * Copyright (c) 2011 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * /]
[module daoCommon('http://www.eclipse.org/emf/2002/Ecore', 'http://www.obeonetwork.org/dsl/entity/2.0.0')/]

[import org::obeonetwork::dsl::environment::gen::java::common::common /]
[import org::obeonetwork::dsl::environment::gen::java::common::services::stringservices /]

[import org::obeonetwork::dsl::entity::gen::java::common::common /]
[import org::obeonetwork::dsl::entity::gen::java::common::structure /]

[comment ** Generates the dao package name for the block.
 * @param block the input block.
 * /]
[template public daoPackage(block : Block) post(trim())]
[if (getProperty('useDaoPackage') = 'no')]
    [block.getCompleteName()/][block.insertInPackage('dao.hibernate.package')/]
[else]
    [if (getProperty('use.functional.disposition') = 'true')]
    [block.baseImports()/].[block.projectName()/].[block.normalizedName()/][block.insertInPackage('dao.hibernate.package')/]
    [else]
    [block.baseImports()/].[block.projectName()/][block.insertInPackage('dao.hibernate.package')/].[block.normalizedName()/]
    [/if]
[/if]
[/template]

[comment ** Generates the dao package name for the entity.
 * @param entity the input entity.
 * /]
[template public daoPackage(entity : Entity) post(trim())]
[comment dao package /]
[if (getProperty('useDaoPackage')='no')]
    [entity.block.getCompleteName()/]
[else]
    [if (getProperty('use.functional.disposition') = 'true')]
    [entity.baseImports()/].[entity.projectName()/].[entity.block.normalizedName()/][entity.insertInPackage('dao.package')/][comment dao /]
    [else]
    [entity.baseImports()/].[entity.projectName()/][entity.insertInPackage('dao.package')/][comment dao()/].[entity.block.normalizedName()/]
    [/if]
[/if]
[/template]

[comment ** Generates the dao factory package name for the element.
 * @param element the input element.
 * /]
[template public daoFactoryPackage(element : EObject)]
[element.baseImports()/].[element.projectName()/][element.insertInPackage('dao.package')/][comment dao /]
[/template]

[comment ** Generates the try dao exception for the element.
 * @param element the input element.
 * /]
[template public tryDaoException(element : EObject)]
[if (element.daoExceptionStrategy() <> 'noException')]try {[/if]
[/template]

[comment ** Generates the throw dao exception for the element.
 * @param element the input element.
 * /]
[template public throwDaoException(element : EObject)]
[if (element.daoExceptionStrategy() <> 'noException')] throws [element.daoExceptionName()/][/if]
[/template]

[comment ** Generates the throws dao exception for the element.
 * @param element the input element.
 * /]
[template public throwsDaoException(element : EObject)]
[if (element.daoExceptionStrategy() <> 'noException')]
} catch (HibernateException e) {
	throw new [element.daoExceptionName()/](e);
}[/if]
[/template]

[comment ** Generates the throw simple dao exception for the element.
 * @param element the input element.
 * /]
[template public throwSimpleDaoException(element : EObject)]
throw new [element.daoExceptionName()/](e);
[/template]

[comment ** Generates the throws message dao exception for the element.
 * @param element the input element.
 * /]
[template public throwsMessageDaoException(element : EObject) post(trim())]
[if (element.daoExceptionStrategy() <>'noException')]throw new [element.daoExceptionName()/]('');[/if]
[/template]

[comment ** Generates the throw comment dao exception for the element.
 * @param element the input element.
 * /]
[template public throwCommentDaoException(element : EObject, arg0 : String)]
[if (element.daoExceptionStrategy() <> 'noException')]

	 * @throws [element.daoExceptionName()/] [if (not(arg0.oclIsUndefined()))][arg0/][/if][/if]
[/template]

[comment ** Generates the import dao exception for the element.
 * @param element the input element.
 * /]
[template public importDaoException(element : EObject)]
[if (element.daoExceptionStrategy() <> 'noException')]import [element.daoExceptionQualifiedName()/];[/if]
[/template]

[comment ** Generates the dao interface qualified name for the entity.
 * @param entity the input entity.
 * /]
[template public daoInterfaceQualifiedName(entity : Entity)]
[entity.daoInterfacePackage()/].[entity.daoInterfaceName()/]
[/template]

[comment ** Generates the dao interface qualified name for the block.
 * @param block the input block.
 * /]
[template public daoInterfaceQualifiedName(block : Block)]
[block.daoInterfacePackage()/].[block.daoInterfaceName()/]
[/template]

[comment ** Generates the dao interface package name for the entity.
 * @param entity the input entity.
 * /]
[template public daoInterfacePackage(entity : Entity) post(trim())]
[if (getProperty('useDaoPackage') = 'no')]
    [entity.block.getCompleteName()/]
[else]
    [if (getProperty('use.functional.disposition') = 'true')]
[entity.baseImports()/].[entity.projectName()/].[entity.block.normalizedName()/][entity.insertInPackage('dao.package')/][entity.insertInPackage('dao.api.package')/][comment dao.api /]
    [else]
[entity.baseImports()/].[entity.projectName()/][entity.insertInPackage('dao.package')/].[entity.block.normalizedName()/][entity.insertInPackage('dao.api.package')/][comment dao.api /]
    [/if]
[/if]
[/template]

[comment ** Generates the dao interface package name for the block.
 * @param block the input block.
 * /]
[template public daoInterfacePackage(block : Block) post(trim())]
[if (getProperty('useDaoPackage')='no')]
    [block.getCompleteName()/]
[else]
    [if (getProperty('use.functional.disposition') = 'true')]
    [block.baseImports()/].[block.projectName()/].[block.normalizedName()/][block.insertInPackage('dao.package')/][block.insertInPackage('dao.api.package')/]
    [else]
    [block.baseImports()/].[block.projectName()/][block.insertInPackage('dao.package')/].[block.normalizedName()/][block.insertInPackage('dao.api.package')/]
    [/if]
[/if]
[/template]

[comment ** Generates the dao interface name for the entity.
 * @param entity the input entity.
 * /]
[template public daoInterfaceName(entity : Entity) post (trim())]
I[entity.name.toStandardNotation().toUpperFirst()/]Dao
[/template]

[comment ** Generates the dao interface name for the block.
 * @param block the input block.
 * /]
[template public daoInterfaceName(block : Block)]
I[block.name.toStandardNotation().toUpperFirst()/]Dao
[/template]
