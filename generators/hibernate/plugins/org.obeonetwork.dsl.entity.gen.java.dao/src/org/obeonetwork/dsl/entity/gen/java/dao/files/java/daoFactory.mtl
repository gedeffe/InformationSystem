[comment encoding = UTF-8 /]
[comment **
 * Copyright (c) 2011 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * /]
[module daoFactory('http://www.eclipse.org/emf/2002/Ecore', 'http://www.obeonetwork.org/dsl/entity/2.0.0')/]

[import org::obeonetwork::dsl::environment::gen::java::common::services::stringservices /]
[import org::obeonetwork::dsl::environment::gen::java::common::common /]
[import org::obeonetwork::dsl::entity::gen::java::common::javaVersion /]
[import org::obeonetwork::dsl::entity::gen::java::common::common /]
[import org::obeonetwork::dsl::entity::gen::java::common::structure /]
[import org::obeonetwork::dsl::entity::gen::java::dao::common::daoCommon /]

[comment ** Generates the dao factory name for the element.
 * @param element the input element.
 * /]
[template public DAOFactoryName(element : EObject)]
[element.projectName().toUpperFirst()/]DaoFactory
[/template]

[comment ** Generates the full filepath for the root.
 * @param root the input root.
 * /]
[template public fullFilePath(root : Root)]
[root.pathToMainJava()/]/[root.daoFactoryPackage().toPath()/]/[root.DAOFactoryName()/].java
[/template]

[comment **
 * DAOFactory abstract class generation
 * /]
[template public daoFactory(root : Root)]
	[file (root.fullFilePath(), false, 'UTF-8')]
package [root.daoFactoryPackage()/];

import java.util.MissingResourceException;
import java.util.ResourceBundle;

import [root.daoExceptionQualifiedName()/];
[root.genImports()->sep(';')->asSet()/]

/**
 * Factory in charge of creating the appropriate instances of DAO objects by
 * using the properties in the dao.properties resource bundle.
 */
public class [root.DAOFactoryName()/] {

    /**
     * Constant that represents the name of the bundle with the DAO mappings.
     */	
	private final static String FILE_DAO_MAPPING = "dao";
	
    /**
     * ResourceBundle that contains the mappings between interfaces and their
     * implementations.
     */
	private static ResourceBundle bundle = ResourceBundle.getBundle(FILE_DAO_MAPPING);

    /**
     * Protected constructor to prevent instantiation. See
     * <a href="http://checkstyle.sourceforge.net/config_design.html">this
     * CheckStyle site's page</a> for details (section DesignForExtension).
     */
    protected [root.projectName().toUpperFirst()/]DaoFactory() {
        // prevents subclass calls
        throw new UnsupportedOperationException();
    }

[comment All Entity class and DAO customized class are gatherd here /]
[for (it : Entity | root.eAllContents(Entity))]

    /**
     * Factory method which provides the appropriate implementation for the
     * [it.daoInterfaceName()/] DAO interface.
     * @return Returns an instance of a class that implements
     * [it.daoInterfaceName()/] as specified in the mapping bundle.
     * @throws DaoException If the declared implementation cannot be found or
     * cannot be instantiated.
     */
	public static [it.packageDeclaration()/][it.daoInterfaceName()/] [it.DAOGetterName()/]() throws DaoException {

		try {
			String className = bundle.getString([it.packageDeclaration()/][it.daoInterfaceName()/].class.getName());

			// Cast and instanciate with JDK 1.5 control
			Class[it.toJavaVersion(it.getClass())/] daoClass = 
				Class.forName(className)[it.addJavaVersion5(it.getSubClass())/];
			return [it.addJavaVersion14(it.getCast())/]daoClass.newInstance();

		} catch (MissingResourceException e) {
			throw new DaoException("Key " 
				+ [it.packageDeclaration()/][it.daoInterfaceName()/].class.getName()
				+ " not found in " + FILE_DAO_MAPPING + ".properties", e);
		} catch (ClassNotFoundException e) {
			throw new DaoException("DAO implementation not found for "
				+ [it.packageDeclaration()/][it.daoInterfaceName()/].class.getName(), e);
		} catch (InstantiationException e) {
			throw new DaoException(e);
		} catch (IllegalAccessException e) {
			throw new DaoException(e);
		}
		
	}
[/for]
}
	[/file]
[/template]

[comment ** Generates the dao getter name for the block.
 * @param block the input block.
 * /]
[template public DAOGetterName(entity : Entity)]
get[entity.getterPrefix()/][entity.name.toStandardNotation().trim().toUpperFirst()/]Dao
[/template]

[comment ** Generates explicit package declaration if many entities have the same name.
 * @param entity the input entity.
 * /]
[template public packageDeclaration(entity : Entity) post (trim())]
[if (not getProperty('daogetter' + entity.name).oclIsUndefined())]
	[entity.daoInterfacePackage()/].
[/if]
[/template]

[comment ** Generates getter prefix name if many entities have the same name.
 * @param entity the input entity.
 * /]
[template public getterPrefix(entity : Entity) post (trim())]
[if (not getProperty('daogetter' + entity.name).oclIsUndefined())]
	[entity.block.camelCaseName().toUpperFirst()/]
[/if]
[/template]

[comment ** Generates a generic parameter for the given entity.
 * @param entity the input entity.
 * /]
[template public getClass(entity : Entity)]
? extends [entity.packageDeclaration()/][entity.daoInterfaceName()/]
[/template]

[comment ** Generates a cast for the given entity.
 * @param entity the input entity.
 * /]
[template public getSubClass(entity : Entity)]
.asSubclass([entity.packageDeclaration()/][entity.daoInterfaceName()/].class)
[/template]

[comment ** Generates a cast for the given entity.
 * @param entity the input entity.
 * /]
[template public getCast(entity : Entity)]
([entity.packageDeclaration()/][entity.daoInterfaceName()/])
[/template]

[comment ** Generates imports for the given root.
 * @param root the input root.
 * /]
[template public genImports(root : Root)]
[for (it : Entity | root.eAllContents(Entity))]
import [it.daoInterfaceQualifiedName()/];
[/for]
[/template]