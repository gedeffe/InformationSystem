[comment encoding = UTF-8 /]
[comment **
 * Copyright (c) 2011 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * /]
[module entity('http://www.eclipse.org/emf/2002/Ecore', 'http://www.obeonetwork.org/dsl/entity/2.0.0', 'http://www.obeonetwork.org/dsl/environment/2.0.0')/]

[import org::obeonetwork::dsl::entity::gen::java::common::datatype /]
[import org::obeonetwork::dsl::environment::gen::java::common::services::stringservices /]
[import org::obeonetwork::dsl::entity::gen::java::common::javaVersion /]
[import org::obeonetwork::dsl::environment::gen::java::common::datatype /]
[import org::obeonetwork::dsl::environment::gen::java::common::common /]
[import org::obeonetwork::dsl::entity::gen::java::common::common /]
[import org::obeonetwork::dsl::entity::gen::java::common::requests::requests /]
[import org::obeonetwork::dsl::environment::gen::java::requests::environment_requests /]

[comment ** Generates the full filepath for the entity.
 * @param entity the input entity.
 * /]
[template public fullFilePath(entity : Entity)]
[entity.pathToMainJava()/]/[entity.entityPackage().toPath()/]/[entity.name.toStandardNotation().toUpperFirst()/].java
[/template]

[template public generateEntity(entity : Entity)]
	[file (fullFilePath(), false, 'UTF-8')]
package [entity.entityPackage()/];

// [protected ('for imports')]
import java.io.Serializable;
[if (entity.references->select(ref : Reference | ref.multiplicity = MultiplicityKind::ZERO_STAR or ref.multiplicity = MultiplicityKind::ONE_STAR)->size() > 0 or 
	entity.ownedAttributes->select(att : Attribute | att.isMultiValuated())->size() > 0)]
import java.util.Collection;
import java.util.HashSet;	
[/if]
[if (entity.ownedAttributes.type->select(pt : PrimitiveType | pt.name = 'Date')->size() > 0)]
import java.util.Date;
[/if]
[for (it : Reference | entity.ownedReferences->select(ref : Reference | ref.type.block <> entity.block))]
import [it.type.entityPackage()/].[it.type.name.toStandardNotation()/];
[/for]
[if (not(entity.supertype.oclIsUndefined()))]
import [entity.supertype.entityPackage()/].[entity.supertype.name.toStandardNotation()/];
[/if]

// [/protected] for imports

[let entityProperties : Sequence(Property) = entity.ownedAttributes->asSequence()->union(entity.ownedReferences->select(ref : Reference | ref.isNavigable())->asSequence())->asOrderedSet()->asSequence()]
/**
 * [comment ownedComment.body/]
 */
public class [entity.name.toStandardNotation().toUpperFirst()/][entity.extensions()/] implements Serializable {

	/**
     * serialVersionUID is used for serialization.
     */
	private static final long serialVersionUID = 1L;

	/**
     * Constant representing the name of the automatic primary key field.
     */
	public static final String PROP_ID = "id";
[for (it : Property | entityProperties)]
	/**
     * Constant representing the name of the field [it.name/].
     */
	public static final String PROP_[it.name.toStandardNotation().toUpper()/][it.index()/] = "[it.name/]";
	
[/for]
    /**
     * Automatic primary key.
     */
    private [entity.defaultPKType()/] id;
    
[for (it : Property | entityProperties)]
    /**
     * Field [it.name/].
     */
	protected [it.toJava()/];

[/for]
	/**
	 * Default constructor.
	 */
	public [entity.name.toStandardNotation().toUpperFirst()/]() {
		super();
		[for (it : Attribute | ownedAttributes)]
			[if (it.multiplicity = MultiplicityKind::ZERO_STAR or it.multiplicity = MultiplicityKind::ONE_STAR)]
		this.[it.name/] = new HashSet[it.toJavaVersion(it.type.toJavaType())/]();
			[/if]
		[/for]
		[for (it : Reference | ownedReferences->select(ref : Reference | ref.isNavigable()))]
			[if (it.multiplicity = MultiplicityKind::ZERO_STAR or it.multiplicity = MultiplicityKind::ONE_STAR)]
		this.[it.name/] = new HashSet[it.toJavaVersion(it.type.toJavaType())/]();
			[/if]
		[/for]
	}
	
	/**
	 * Return the identifier.
	 * @return id
	 */
	public [entity.defaultPKType()/] getId() {
		return this.id;
	}

	/**
	 * Set a value to parameter id.
	 * @param id Value of the identifier.
	 */
	public void setId(final [entity.defaultPKType()/] id) {
		this.id = id;
	}	
[if (entityProperties->size() > 0)]

	/**
	 * Constructor with all parameters initialized.
[for (it : Property | entityProperties)]
	 * @param [it.name/]. [comment ownedComment.body/]
[/for]
	 */
	public [entity.name.toStandardNotation().toUpperFirst()/]([for (it : Property | entityProperties)][if (i <> 1)], [/if][it.toJava()/][/for]) {
[if (entity.ownedAttributes->select(att : Attribute | att.isMultiValuated())->filter(Property)->union(entity.ownedReferences->select(ref : Reference | ref.isNavigable() and ref.isMultiValuated())->filter(Property))->size() > 0)]
		this();
[/if]
[for (it : Property | entityProperties)]
	[if (it.isMonoValuated())]
		this.[it.name.toStandardNotation().toLowerFirst()/] = [name.toStandardNotation().toLowerFirst()/];
	[else]
		this.[name.toStandardNotation().toLowerFirst()/].addAll([name.toStandardNotation().toLowerFirst()/]);
	[/if]
[/for]
	}
[/if]
[for (it : Attribute | ownedAttributes)]

	/**
	 * Return [it.name.toStandardNotation()/].
	 * @return [it.name.toStandardNotation()/][comment ownedComment.body/]
	 */
	public [it.toJavaType()/] get[it.name.toStandardNotation().toUpperFirst()/]() {
		return [it.name.toStandardNotation().toLowerFirst()/];
	}

	/**
	 * Set a value to parameter [it.name/].
	 * @param [it.name.toStandardNotation()/][comment ownedComment.body/]
	 */
	public void set[it.name.toStandardNotation().toUpperFirst()/](final [it.toJavaType()/] [it.name.toStandardNotation().toLowerFirst()/]) {
		this.[it.name.toStandardNotation().toLowerFirst()/] = [it.name.toStandardNotation().toLowerFirst()/];
	}
	[if (it.multiplicity = MultiplicityKind::ZERO_STAR or it.multiplicity = MultiplicityKind::ONE_STAR)]
	
	/**
	 * Add a [it.name.toStandardNotation()/] to the [it.name.toStandardNotation()/] collection.
	 * @param [it.name.toStandardNotation()/]Elt Element to add.
	 */
	 public void add[it.name.toStandardNotation().toUpperFirst()/](final [it.type.toJavaType()/] [it.name/]Elt) {
	 	this.[it.name.toStandardNotation()/].add([it.name.toStandardNotation()/]Elt);
	 }
	 
	/**
	 * Remove a [it.name.toStandardNotation()/] to the [it.name.toStandardNotation()/] collection.
	 * @param [it.name.toStandardNotation()/]Elt Element to remove.
	 */
	 public void remove[it.name.toStandardNotation().toUpperFirst()/](final [it.type.toJavaType()/] [it.name.toStandardNotation()/]Elt) {
	 	this.[it.name.toStandardNotation()/].remove([it.name.toStandardNotation()/]Elt);
	 }
	 [/if]
[/for]
[for (it : Reference | ownedReferences->asSequence()->select(ref : Reference | ref.isNavigable()))]

	/**
	 * Return [it.name.toStandardNotation()/].
	 * @return [it.name.toStandardNotation()/][comment ownedComment.body --/]
	 */
	public [it.toJavaType()/] get[it.name.toStandardNotation().toUpperFirst()/]() {
		return [it.name.toStandardNotation().toLowerFirst()/];
	}

	/**
	 * Set a value to parameter [it.name.toStandardNotation()/].
	 * @param [it.name.toStandardNotation()/][comment ownedComment.body --/]
	 */
	public void set[it.name.toStandardNotation().toUpperFirst()/](final [it.toJavaType()/] [it.name.toStandardNotation()/]) {
		this.[it.name.toStandardNotation().toLowerFirst()/] = [it.name.toStandardNotation()/];
	}
	[if (it.isMultiValuated())]
	
	/**
	 * Add a [it.name.toStandardNotation()/] to the [it.name.toStandardNotation()/] collection.
	 [if (it.isBidirectional())]
	 * Birectional association : add the current [it.entity.name/] instance to given [it.name.toStandardNotation()/] parameter.
	 [/if]
	 * @param [it.name.toStandardNotation()/]Elt Element to add.
	 */
	 public void add[it.name.toStandardNotation().toUpperFirst()/](final [it.type.toJavaType()/] [it.name.toStandardNotation()/]Elt) {
	 	this.[it.name.toStandardNotation()/].add([it.name.toStandardNotation()/]Elt);
	 	[if (it.isBidirectional())]
	 		[if (it.oppositeOf.isMonoValuated())]
	 	[it.name.toStandardNotation()/]Elt.set[it.oppositeOf.name.toUpperFirst()/](this);
	 		[else]
	 	[it.name.toStandardNotation()/]Elt.get[it.oppositeOf.name.toUpperFirst()/]().add(this);
	 		[/if]
	 	[/if]
	 }
	 
	/**
	 * Remove a [it.name.toStandardNotation()/] to the [it.name.toStandardNotation()/] collection.
	 [if (it.isBidirectional())]
	 * Birectionnal association : remove the current [it.entity.name/] instance to given [it.name/] parameter.
	 [/if]
	 * @param [it.name.toStandardNotation()/]Elt Element to remove.
	 */
	 public void remove[it.name.toUpperFirst()/](final [it.type.toJavaType()/] [it.name.toStandardNotation()/]Elt) {
	 	this.[it.name.toStandardNotation()/].remove([it.name.toStandardNotation()/]Elt);
	 	[if (it.isBidirectional())]
	 		[if (it.oppositeOf.isMonoValuated())]
 		[it.name.toStandardNotation()/]Elt.set[it.oppositeOf.name.toStandardNotation().toUpperFirst()/](null);
	 		[else]
	 	[it.name.toStandardNotation()/]Elt.get[it.oppositeOf.name.toStandardNotation().toUpperFirst()/]().remove(this);
	 		[/if]
	 	[/if]
	 }
	 [/if]
[/for]
[if (entity.dtoPerEntity())]

    /**
     * Provides a Data value object corresponding to this entity.
     * @return Returns a new instance of [entity.dtoName()/] which contains
     * the same values as the current entity.
     */
    public [entity.dtoName()/] get[entity.dtoSuffix()/]() {
        [entity.dtoName()/] result = new [entity.dtoName()/]();
        copyTo[entity.dtoSuffix()/](result);
        return result;
    }

    /**
     * Copies the current entity to the given value object. Associations are
     * NOT copied.
     * @param aValueObject The value object to get the values from.
     */
    public void copyTo[entity.dtoSuffix()/](final [entity.dtoName()/] aValueObject) {
    [if (not(entity.supertype.oclIsUndefined()))]
        super.copyTo[entity.dtoSuffix()/](aValueObject);
    [/if]
    [for (it : Attribute | ownedAttributes)]
        aValueObject.set[it.name.toUpperFirst()/](get[it.name.toUpperFirst()/]());
    [/for]
    }

    /**
     * Updates the values of this entity from those of the given value object.
     * Associations are NOT updated.
     * <strong>N.B.</strong> The PK value is not updated.
     * @param aValueObject The value object to copy the values to.
     */
    public void updateFrom[entity.dtoSuffix()/](final [entity.dtoName()/] aValueObject) {
    [if (not(entity.supertype.oclIsUndefined()))]
        super.updateFrom[entity.dtoSuffix()/](aValueObject);
    [/if]
    [for (it : Attribute | ownedAttributes)]
        set[it.name.toStandardNotation().toUpperFirst()/](aValueObject.get[name.toStandardNotation().toUpperFirst()/]());
    [/for]
    }
[/if]

	/** 
	 [if (getProperty('object.equality.strategy') = 'identifier')]
	 * Equality test based on identifiers.
	 [else]
	 * Equality test based on attributes values.
	 [/if]
	 * @param value Value to compare.
	 * @return Returns true if and only if given object is an instance of
	 [if (entity.defaultPKType().isPrimitiveType())]
     * [entity.name.toStandardNotation()/] and the given object has the same PK as this.
     [else]
     * [entity.name.toStandardNotation()/] and the given object has the same PK as this
     	[if (getProperty('object.equality.strategy') = 'identifier')]
     * if the PK is not null or their ids are equal.
	 	[else]
     * if the PK is not null or their fields are equal.
	 	[/if]
     [/if]
	 */
	public boolean equals(final Object other) {
	 	// [protected ('for equals')]
		if (this == other) {
			return true;
		}
		[if (getProperty('object.equality.strategy') = 'identifier')]
		if (id==null) {
			return false;
		}
		[/if]
		if (!(other instanceof [entity.name.toStandardNotation().toUpperFirst()/])) {
			return false;
		}
		
		final [entity.name.toStandardNotation().toUpperFirst()/] castedOther = ([entity.name.toStandardNotation().toUpperFirst()/]) other;
		[if (getProperty('object.equality.strategy') = 'identifier')]
			[if (entity.defaultPKType().isPrimitiveType())]
        return id == castedOther.getId();
   			[else]
		if (id != null && castedOther.getId() != null) {
			return id.equals(castedOther.getId());
		}
		return true;
			[/if]
		
		[else]
			[for (it : Property | entityProperties)]
				[if (it.oclIsKindOf(Attribute) and it.oclAsType(Attribute).type.isJavaPrimitiveType() = 'true')]
		if ([it.name.toStandardNotation().toLowerFirst()/] != castedOther.get[it.name.toStandardNotation().toUpperFirst()/]()) {
			return false;
		}
				[else]
					[if (it.oclIsKindOf(Reference) and it.oclAsType(Reference).isMonoValuated() and it.oclAsType(Reference).isUnique() and it.oclAsType(Reference).isPositive())] [comment one-to-one bidi/]
		//FIXME Cannot test [it.name.toStandardNotation().toLowerFirst()/] attribute in one-to-one associatian bidi (because it's thrown a StackOverFlow exception)
					[else]
		if (([it.name.toStandardNotation().toLowerFirst()/] == null && castedOther.get[it.name.toStandardNotation().toUpperFirst()/]() != null) || 
			 ([it.name.toStandardNotation().toLowerFirst()/] != null && ![it.name.toStandardNotation().toLowerFirst()/].equals(castedOther.get[it.name.toStandardNotation().toUpperFirst()/]())) 
		   ) return false;
					[/if]
				[/if]
			[/for]
		return true;
		[/if]
		 // [/protected] for equals
	}

	/** 
	 [if (getProperty('object.equality.strategy') = 'identifier')]
	 * HashTable code based on identifier hash codes.
	 [else]
	 * HashTable code based on attributes hash codes.
	 [/if]
	 * @return hash value.
	 */
	public int hashCode() {
		[if (getProperty('object.equality.strategy') = 'identifier')]
		return id==null ? System.identityHashCode(this) : id.hashCode();
		[else]
		int result = 14;
			[for (it : Attribute | ownedAttributes)]
				[if (it.type.toJavaType() = 'boolean')]
		if ([it.name.toStandardNotation().toLowerFirst()/]) result++;
				[elseif (it.type.toJavaType() = 'int')]
		result = 29 * result + [it.name.toStandardNotation().toLowerFirst()/];
				[elseif (it.type.toJavaType() = 'float')]
		if ([it.name.toStandardNotation().toLowerFirst()/] != null) result = (int) (29 * result + [it.name.toStandardNotation().toLowerFirst()/].hashCode());
				[elseif (it.type.toJavaType() = 'double')]
		result = 29 * result + (int)[it.name.toStandardNotation().toLowerFirst()/];
				[else]
		if ([it.name.toStandardNotation().toLowerFirst()/] != null) result = 29 * result + [it.name.toStandardNotation().toLowerFirst()/].hashCode();
				[/if]
			[/for]
		return result;
		[/if]
	}
   
	// [protected ('for private methods')]
	// TODO Remove this line and add your private methods here
	// [/protected] for private methods
   
}
[/let]
	[/file]
[/template]

[comment ** Generates the extend part for the entity.
 * @param entity the input entity.
 * /]
[template public extensions(entity : Entity)]
[if (not(entity.supertype.oclIsUndefined()))] extends [entity.supertype.name.toStandardNotation()/][/if]
[/template]

[comment ** Generates the given property into java.
 * @param property the input property.
 * /]
[template public toJava(property : Property)]
/*generator should handle entity::toJava for [property.eClass().name/]*/
[/template]

[comment ** Generates the given attribute into java.
 * @param attribute the input attribute.
 * /]
[template public toJava(attribute : Attribute) post(trim())]
[if (attribute.isMultiValuated()) ]
Collection[attribute.toJavaVersion(attribute.type.toJavaType())/] [attribute.name.toStandardNotation().toLowerFirst()/]
[else]
[attribute.type.toJavaType()/] [attribute.name.toStandardNotation().toLowerFirst()/]
[/if]
[/template]

[comment ** Generates the given reference into java.
 * @param reference the input reference.
 * /]
[template public toJava(reference : Reference) post(trim())]
[if (reference.isMultiValuated())]
Collection[reference.toJavaVersion(reference.type.toJavaType())/] [reference.name.toStandardNotation().toLowerFirst()/]
[else]
[reference.type.toJavaType()/] [reference.name.toStandardNotation().toLowerFirst()/]
[/if]
[/template]

[comment ** Generates the given property into java type.
 * @param property the input property.
 * /]
[template public toJavaType(property : Property)]
/*generator should handle entity::toJavaType for [property.eClass().name/]*/
[/template]

[comment ** Generates the given attribute into java type.
 * @param attribute the input attribute.
 * /]
[template public toJavaType(attribute : Attribute) post(trim())]
[if (attribute.isMultiValuated())]
Collection[attribute.toJavaVersion(attribute.type.toJavaType())/]
[else]
[attribute.type.toJavaType()/]
[/if]
[/template]

[comment ** Generates the given reference into java type.
 * @param reference the input reference.
 * /]
[template public toJavaType(reference : Reference) post(trim())]
[if (reference.isMultiValuated())]
Collection[reference.toJavaVersion(reference.type.toJavaType())/]
[else]
[reference.type.toJavaType()/]
[/if]
[/template]

[comment ** Get the attributes with the given name for the entity.
 * @param entity the input entity.
 * @param arg0 the input name. 
 * /]
[query public attributesWithName(entity : Entity, arg0 : String) : Attribute = 
entity.attributes->select(att : Attribute | att.name = arg0)->first()
/]

[comment ** Get the references with the given name for the entity.
 * @param entity the input entity.
 * @param arg0 the input name. 
 * /]
[query public referencesWithName(entity : Entity, arg0 : String) : Reference = 
entity.references->select(ref : Reference | ref.isNavigable() and ref.name = arg0)->first()
/]

[comment ** Get the properties with the same attribute name of the given attribute.
 * @param attribute the input attribute.
 * /]
[query public propertiesWithSameName(attribute : Attribute) : Sequence(Property) = 
attribute.entity.attributesWithName(attribute.name)->filter(Property)->union(attribute.entity.referencesWithName(attribute.name)->filter(Property))->asSequence()
/]

[comment ** Get the properties with the same reference name of the given reference.
 * @param reference the input reference.
 * /]
[query public propertiesWithSameName(reference :Reference) : Sequence(Property) = 
reference.entity.attributesWithName(reference.name)->filter(Property)->union(reference.entity.referencesWithName(reference.name)->filter(Property))->asSequence()
/]

[comment ** Generates the index for the property.
 * @param property the input property.
 * /]
[template public index(property : Property)]
[/template]

[comment ** Generates the index for the attribute.
 * @param attribute the input attribute.
 * /]
[template public index(attribute : Attribute)]
[if (attribute.name = 'ID')]_2[else][if (attribute.propertiesWithSameName()->size() > 1)][for (it : Property | attribute.propertiesWithSameName())][if (it = attribute)][i/][/if][/for][/if][/if]
[/template]

[comment ** Generates the index for the reference.
 * @param reference the input reference.
 * /]
[template public index(reference : Reference)]
[if (reference.name = 'ID')]_2[else][if (reference.propertiesWithSameName()->size() > 1)][for (it : Property | reference.propertiesWithSameName())][if (it = reference)][i/][/if][/for][/if][/if]
[/template]